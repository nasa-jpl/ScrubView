"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileLocation = void 0;
const path = __importStar(require("path"));
class FileLocation {
    constructor(filePath, lineNumber, sourceRoot) {
        this.filePath = filePath;
        this.lineNumber = lineNumber;
        this.sourceRoot = sourceRoot;
        // Find the Module Name
        // Assumes format of the path is /<build path>/src/<module name>/<file path>
        let pathComponents = this.filePath.split("/");
        // let srcIndex = pathComponents.indexOf("src");
        // this.moduleName = pathComponents[srcIndex + 1];
        this.moduleName = pathComponents[pathComponents.length - 2];
        this.fileName = pathComponents[pathComponents.length - 1];
    }
    /**
     * Creates a FilePath object from a static analyzer's URI format.
     * @param rawPath The original path as generated by the static analyzer
     * @param lineNumber Line Number
     * @param buildPath The current build's path
     */
    static fromAnalyzerPath(rawUri, lineNumber, buildPath) {
        // // Find the "src" directory in the buildPath, then truncate the last part
        // // of the array (src and after)
        // let buildPathComponents = buildPath.split("/");
        // let buildSrcIndex = buildPathComponents.indexOf("src");
        // buildPathComponents = buildPathComponents.slice(0, buildSrcIndex);
        // // Find the 'src' directory in the rawPath, then truncate the first part
        // // of the array (index 0 to src inclusive)
        // let rawPathComponents = rawUri.split("/");
        // let rawSrcIndex = rawPathComponents.indexOf("src");
        // rawPathComponents = rawPathComponents.slice(rawSrcIndex + 1);
        // // Build the Final File Path
        // // Format is <build directory>/src/<raw path to file>
        // let filePath = "/";
        // for(let pathComponent of buildPathComponents)
        //     filePath = path.join(filePath, pathComponent);
        // filePath = path.join(filePath, "src");
        // for(let pathComponent of rawPathComponents)
        //     filePath = path.join(filePath, pathComponent);
        let filePath = rawUri;
        // Done, return the object
        return new FileLocation(filePath, lineNumber, buildPath);
    }
    /**
     * Builds a FileLocation object from a module relative path.
     * A module relative path is of the format "acmgr_impl.c" where the first
     * portion of the filename "acmgr" is the module.
     * @param relativeFilePath Relative path to the file
     * @param lineNumber Line Number
     * @param buildPath The current build's path
     * @returns A FileLocation object which describes the build relative path
     */
    static fromModuleRelativeFile(relativeFilePath, lineNumber, buildPath) {
        // Get the Module Name
        let pathComponents = relativeFilePath.split("/");
        let fileName = pathComponents[pathComponents.length - 1];
        let fileNameComponents = fileName.split(/[_\.]/);
        let moduleName = fileNameComponents[0];
        // Build the Full Path
        let filePath = path.join(buildPath, moduleName, relativeFilePath);
        // Return the object
        return new FileLocation(filePath, lineNumber, buildPath);
    }
}
exports.FileLocation = FileLocation;
//# sourceMappingURL=fileLocation.js.map