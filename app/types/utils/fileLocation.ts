import { Build } from "../buildParser";
import * as path from 'path';
import { Log } from "./log";

export class FileLocation
{
    public readonly filePath : string;
    public readonly moduleName : string;
    public readonly fileName : string;
    public readonly lineNumber : number;
    public readonly sourceRoot : string;

    constructor(filePath : string, lineNumber : number, sourceRoot : string)
    {
        this.filePath = filePath;
        this.lineNumber = lineNumber;
        this.sourceRoot = sourceRoot;

        // Find the Module Name
        // Assumes format of the path is /<build path>/src/<module name>/<file path>
        let pathComponents = this.filePath.split("/");

        // let srcIndex = pathComponents.indexOf("src");

        // this.moduleName = pathComponents[srcIndex + 1];
        this.moduleName = pathComponents[pathComponents.length - 2];
        this.fileName = pathComponents[pathComponents.length - 1];
    }

    /**
     * Creates a FilePath object from a static analyzer's URI format.
     * @param rawPath The original path as generated by the static analyzer
     * @param lineNumber Line Number
     * @param buildPath The current build's path
     */
    public static fromAnalyzerPath(rawUri : string, lineNumber : number, buildPath : string) : FileLocation
    {
        // // Find the "src" directory in the buildPath, then truncate the last part
        // // of the array (src and after)
        // let buildPathComponents = buildPath.split("/");
        // let buildSrcIndex = buildPathComponents.indexOf("src");
        // buildPathComponents = buildPathComponents.slice(0, buildSrcIndex);

        // // Find the 'src' directory in the rawPath, then truncate the first part
        // // of the array (index 0 to src inclusive)
        // let rawPathComponents = rawUri.split("/");
        // let rawSrcIndex = rawPathComponents.indexOf("src");
        // rawPathComponents = rawPathComponents.slice(rawSrcIndex + 1);

        // // Build the Final File Path
        // // Format is <build directory>/src/<raw path to file>
        // let filePath = "/";
        // for(let pathComponent of buildPathComponents)
        //     filePath = path.join(filePath, pathComponent);

        // filePath = path.join(filePath, "src");

        // for(let pathComponent of rawPathComponents)
        //     filePath = path.join(filePath, pathComponent);

        let filePath = rawUri;

        // Done, return the object
        return new FileLocation(filePath, lineNumber, buildPath);
    }

    /**
     * Builds a FileLocation object from a module relative path.
     * A module relative path is of the format "acmgr_impl.c" where the first
     * portion of the filename "acmgr" is the module.
     * @param relativeFilePath Relative path to the file
     * @param lineNumber Line Number
     * @param buildPath The current build's path
     * @returns A FileLocation object which describes the build relative path 
     */
    public static fromModuleRelativeFile(relativeFilePath : string, lineNumber : number, buildPath : string) : FileLocation
    {
        // Get the Module Name
        let pathComponents = relativeFilePath.split("/");
        let fileName = pathComponents[pathComponents.length - 1];
        let fileNameComponents = fileName.split(/[_\.]/);
        let moduleName = fileNameComponents[0];

        // Build the Full Path
        let filePath = path.join(buildPath, moduleName, relativeFilePath);

        // Return the object
        return new FileLocation(filePath, lineNumber, buildPath);
    }


}